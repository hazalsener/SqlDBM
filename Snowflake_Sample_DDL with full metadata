-- ************************** SqlDBM: Snowflake *************************
-- ** Generated by SqlDBM: Untitled projectxx by hazal.sener@sqldbm.com *


-- **************************************  "business_domain"
CREATE TAG "business_domain";

-- **************************************  "cost_center"
CREATE TAG "cost_center";

-- **************************************  "data_owner"
CREATE TAG "data_owner";

-- **************************************  "gdpr_compliant"
CREATE TAG "gdpr_compliant";

-- **************************************  "pii_flag"
CREATE TAG "pii_flag";
-- **************************************
-- TABLE: warehouses
-- Stores information about company warehouses including capacity, location, and management details.
-- **************************************
CREATE TABLE warehouses
(
 warehouse_id          bigint NOT NULL COMMENT 'Unique identifier for the warehouse',
 warehouse_name        varchar(100) COMMENT 'Name of the warehouse facility',
 location              varchar(100) COMMENT 'Geographical location or city of the warehouse',
 capacity_cubic_meters decimal(12,2) COMMENT 'Maximum storage capacity of the warehouse in cubic meters',
 manager_name          varchar(100) COMMENT 'Name of the person managing this warehouse',
 operating_hours       varchar(50) COMMENT 'Typical working hours or shifts of the warehouse',
 created_at            timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Timestamp when the record was created',

 CONSTRAINT PK_warehouses PRIMARY KEY ( warehouse_id )
)
COMMENT = 'Master table containing details of all warehouses in the company logistics network.';


-- **************************************
-- TABLE: suppliers
-- Holds supplier details, contracts, and contact information.
-- **************************************
CREATE TABLE suppliers
(
 supplier_id         bigint NOT NULL COMMENT 'Unique identifier for each supplier',
 supplier_name       varchar(100) COMMENT 'Registered name of the supplier company',
 contact_person      varchar(100) COMMENT 'Primary contact person at the supplier organization',
 email               varchar(100) COMMENT 'Email address of the supplier contact',
 phone               varchar(20) COMMENT 'Phone number for supplier communication',
 address             text COMMENT 'Full address of the supplier',
 country             varchar(50) COMMENT 'Country where the supplier operates',
 rating              decimal(3,2) COMMENT 'Performance or reliability rating for the supplier (e.g., 1.00–5.00)',
 contract_start_date date COMMENT 'Start date of supplier contract',
 contract_end_date   date COMMENT 'End date of supplier contract',
 created_at          timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Timestamp when the record was created',

 CONSTRAINT PK_suppliers PRIMARY KEY ( supplier_id )
)
COMMENT = 'Contains supplier contact details, ratings, and contractual information.';


-- **************************************
-- TABLE: products
-- Catalog of all available products, including pricing and category details.
-- **************************************
CREATE TABLE products
(
 product_id   bigint NOT NULL COMMENT 'Unique identifier for each product',
 product_name varchar(200) COMMENT 'Official name of the product',
 brand        varchar(100) COMMENT 'Brand or manufacturer of the product',
 category     varchar(50) COMMENT 'Main category to which the product belongs',
 subcategory  varchar(50) COMMENT 'Subcategory for more granular classification',
 unit_price   decimal(10,2) COMMENT 'Current selling price per unit of the product',
 cost_price   decimal(10,2) COMMENT 'Cost incurred to produce or procure the product',
 weight       decimal(8,2) COMMENT 'Weight of a single unit of the product (in kg or other unit)',
 dimensions   varchar(50) COMMENT 'Physical dimensions of the product package',
 launch_date  date COMMENT 'Date when the product was first launched or made available for sale',
 status       varchar(20) COMMENT 'Current status of the product (e.g., active, discontinued)',
 created_at   timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Record creation timestamp',
 updated_at   timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Timestamp of last update to the record',

 CONSTRAINT PK_products PRIMARY KEY ( product_id )
) 
COMMENT = 'Master product catalog containing product attributes, prices, and lifecycle information.'
WITH TAG ("data_owner" = 'product_team', "business_domain" = 'catalog', "cost_center" = 'PROD-001');


-- **************************************
-- TABLE: customers
-- Contains personal and demographic details of registered customers.
-- **************************************
CREATE TABLE customers
(
 customer_id       bigint NOT NULL COMMENT 'Unique identifier for each customer',
 first_name        varchar(50) COMMENT 'Customer’s first name',
 last_name         varchar(50) COMMENT 'Customer’s last name',
 email             varchar(100) COMMENT 'Email address used for communication and login',
 phone             varchar(20) COMMENT 'Customer phone number',
 registration_date date COMMENT 'Date the customer registered in the system',
 customer_segment  varchar(20) COMMENT 'Customer classification (e.g., Retail, Wholesale, VIP)',
 country           varchar(50) COMMENT 'Customer’s country of residence',
 state             varchar(50) COMMENT 'State or province of the customer',
 city              varchar(50) COMMENT 'City of residence',
 postal_code       varchar(10) COMMENT 'Postal or ZIP code',
 created_at        timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Record creation timestamp',
 updated_at        timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Last update timestamp',

 CONSTRAINT PK_customers PRIMARY KEY ( customer_id )
)
COMMENT = 'Stores personal, geographic, and segmentation information about customers.'
WITH TAG ("gdpr_compliant" = 'true');


-- **************************************
-- TABLE: product_suppliers
-- Maps products to their suppliers, including pricing and lead time information.
-- **************************************
CREATE TABLE product_suppliers
(
 product_supplier_id    bigint NOT NULL COMMENT 'Unique identifier for the product-supplier relationship',
 product_id             bigint NOT NULL COMMENT 'Foreign key referencing the product',
 supplier_id            bigint NOT NULL COMMENT 'Foreign key referencing the supplier',
 supply_price           decimal(10,2) COMMENT 'Price per unit offered by the supplier',
 lead_time_days         integer COMMENT 'Number of days supplier takes to deliver after order',
 minimum_order_quantity integer COMMENT 'Minimum number of units that can be ordered from this supplier',
 is_primary_supplier    boolean DEFAULT FALSE COMMENT 'Flag indicating whether this is the primary supplier',
 created_at             timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Timestamp when record was created',

 CONSTRAINT PK_product_suppliers PRIMARY KEY ( product_supplier_id ),
 CONSTRAINT FK_product_suppliers_products FOREIGN KEY ( product_id ) REFERENCES products ( product_id ),
 CONSTRAINT FK_product_suppliers_suppliers FOREIGN KEY ( supplier_id ) REFERENCES suppliers ( supplier_id )
)
COMMENT = 'Defines supplier relationships for each product, including cost, lead time, and order terms.';


-- **************************************
-- TABLE: orders
-- Contains customer order transactions and financial details.
-- **************************************
CREATE TABLE orders
(
 order_id         bigint NOT NULL COMMENT 'Unique identifier for the order',
 customer_id      bigint NOT NULL COMMENT 'Foreign key linking to the customer placing the order',
 order_date       date COMMENT 'Date the order was placed',
 order_timestamp  timestamp_ntz COMMENT 'Exact timestamp when the order was submitted',
 total_amount     decimal(12,2) COMMENT 'Total value of the order before discounts and taxes',
 discount_amount  decimal(10,2) COMMENT 'Total discount applied to the order',
 tax_amount       decimal(10,2) COMMENT 'Tax charged on the order',
 shipping_cost    decimal(8,2) COMMENT 'Cost of shipping for the order',
 payment_method   varchar(30) COMMENT 'Payment method used (e.g., credit card, PayPal)',
 order_status     varchar(20) COMMENT 'Status of the order (e.g., pending, completed, cancelled)',
 shipping_address text COMMENT 'Address where the order should be shipped',
 billing_address  text COMMENT 'Billing address associated with the payment method',
 currency         varchar(3) COMMENT 'Currency code (e.g., USD, EUR)',
 exchange_rate    decimal(10,4) DEFAULT 1.0 COMMENT 'Exchange rate applied if currency differs from base',
 created_at       timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Timestamp when the record was created',
 updated_at       timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Timestamp of the last modification',

 CONSTRAINT PK_orders PRIMARY KEY ( order_id ),
 CONSTRAINT FK_orders_customers FOREIGN KEY ( customer_id ) REFERENCES customers ( customer_id )
)
COMMENT = 'Stores customer order details, financials, and fulfillment data.'
WITH TAG ("data_owner" = 'sales_team', "pii_flag" = 'true', "cost_center" = 'SALES-001');


-- **************************************
-- TABLE: inventory
-- Tracks stock levels and restocking metrics across warehouses.
-- **************************************
CREATE TABLE inventory
(
 inventory_id       bigint NOT NULL COMMENT 'Unique identifier for the inventory record',
 product_id         bigint NOT NULL COMMENT 'Foreign key referencing the product',
 warehouse_id       bigint NOT NULL COMMENT 'Foreign key referencing the warehouse',
 quantity_on_hand   integer COMMENT 'Total quantity currently in stock',
 quantity_reserved  integer COMMENT 'Quantity reserved for pending orders',
 quantity_available integer COMMENT 'Quantity available for sale (on hand - reserved)',
 reorder_point      integer COMMENT 'Stock level threshold that triggers reorder',
 reorder_quantity   integer COMMENT 'Preferred quantity to reorder when restocking',
 last_restock_date  date COMMENT 'Date of the last stock replenishment',
 created_at         timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Record creation timestamp',
 updated_at         timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Record last update timestamp',

 CONSTRAINT PK_inventory PRIMARY KEY ( inventory_id ),
 CONSTRAINT FK_inventory_products FOREIGN KEY ( product_id ) REFERENCES products ( product_id ),
 CONSTRAINT FK_inventory_warehouses FOREIGN KEY ( warehouse_id ) REFERENCES warehouses ( warehouse_id )
)
COMMENT = 'Captures stock levels, reorder information, and warehouse inventory status.'
WITH TAG ("pii_flag" = 'false', "cost_center" = 'INV-001');


-- **************************************
-- TABLE: shipments
-- Tracks shipment and delivery information for customer orders.
-- **************************************
CREATE TABLE shipments
(
 shipment_id             bigint NOT NULL COMMENT 'Unique identifier for the shipment',
 order_id                bigint NOT NULL COMMENT 'Foreign key referencing the order',
 warehouse_id            bigint NOT NULL COMMENT 'Warehouse fulfilling the shipment',
 carrier                 varchar(50) COMMENT 'Name of the shipping carrier or courier',
 tracking_number         varchar(100) COMMENT 'Tracking number provided by the carrier',
 ship_date               date COMMENT 'Date when the shipment was dispatched',
 estimated_delivery_date date COMMENT 'Planned or estimated delivery date',
 actual_delivery_date    date COMMENT 'Actual delivery completion date',
 shipment_status         varchar(20) COMMENT 'Current status of the shipment (e.g., in transit, delivered)',
 shipping_cost           decimal(8,2) COMMENT 'Cost incurred for shipping',
 weight                  decimal(8,2) COMMENT 'Weight of the shipped items',
 created_at              timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Record creation timestamp',
 updated_at              timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Last modification timestamp',

 CONSTRAINT PK_shipments PRIMARY KEY ( shipment_id ),
 CONSTRAINT FK_shipments_orders FOREIGN KEY ( order_id ) REFERENCES orders ( order_id ),
 CONSTRAINT FK_shipments_warehouses FOREIGN KEY ( warehouse_id ) REFERENCES warehouses ( warehouse_id )
)
COMMENT = 'Contains shipping and delivery tracking information for customer orders.'
WITH TAG ("data_owner" = 'logistics_team');


-- **************************************
-- TABLE: order_items
-- Line-level details for products within each order.
-- **************************************
CREATE TABLE order_items
(
 order_item_id    bigint NOT NULL COMMENT 'Unique identifier for the order item record',
 order_id         bigint NOT NULL COMMENT 'Foreign key referencing the parent order',
 product_id       bigint NOT NULL COMMENT 'Foreign key referencing the purchased product',
 quantity         integer COMMENT 'Number of units ordered for this product',
 unit_price       decimal(10,2) COMMENT 'Price per unit at the time of the order',
 discount_percent decimal(5,2) COMMENT 'Discount percentage applied to this item',
 line_total       decimal(12,2) COMMENT 'Total amount for this line item after discount',
 created_at       timestamp_ntz DEFAULT CURRENT_TIMESTAMP() COMMENT 'Timestamp when the line item was created',

 CONSTRAINT PK_order_items PRIMARY KEY ( order_item_id ),
 CONSTRAINT FK_order_items_orders FOREIGN KEY ( order_id ) REFERENCES orders ( order_id ),
 CONSTRAINT FK_order_items_products FOREIGN KEY ( product_id ) REFERENCES products ( product_id )
)
COMMENT = 'Details each product within a customer order, including pricing and discounts.';


-- **************************************
-- DYNAMIC TABLE: real_time_inventory_status
-- Provides a live, analytical view of current inventory health and supplier info.
-- **************************************
CREATE DYNAMIC TABLE real_time_inventory_status
(
 product_id     int NOT NULL COMMENT 'Unique identifier for the product',
 product_name   varchar NOT NULL COMMENT 'Name of the product',
 brand          varchar NOT NULL COMMENT 'Product brand',
 category       varchar NOT NULL COMMENT 'Product category',
 unit_price     number(38,0) NOT NULL COMMENT 'Unit selling price',
 warehouse_id   number(38,0) NOT NULL COMMENT 'Unique identifier of the warehouse',
 warehouse_name varchar NOT NULL COMMENT 'Name of the warehouse',
 location       varchar NOT NULL COMMENT 'Warehouse location or region'
)
COMMENT = 'Dynamic table providing real-time visibility into product inventory, stock levels, and supplier metrics.'
WITH TAG ("data_owner" = 'inventory_team')
WAREHOUSE = COMPUTE_WH
TARGET_LAG = '1 MINUTE'
AS
-- [query remains unchanged…]


-- **************************************
-- VIEW: customer_analytics_dashboard
-- Aggregated customer metrics for analytics and segmentation purposes.
-- **************************************
-- ************************************** customer_analytics_dashboard
CREATE VIEW customer_analytics_dashboard
(
  customer_id,
  first_name,
  last_name,
  email,
  customer_segment,
  country,
  registration_date
)
AS
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    c.customer_segment,
    c.country,
    c.registration_date,
    
    -- Order metrics
    COUNT(DISTINCT o.order_id) as total_orders,
    SUM(o.total_amount) as lifetime_value,
    AVG(o.total_amount) as average_order_value,
    MIN(o.order_date) as first_order_date,
    MAX(o.order_date) as last_order_date,
    DATEDIFF('day', MIN(o.order_date), MAX(o.order_date)) as customer_lifespan_days,
    
    -- Financial metrics
    SUM(o.discount_amount) as total_discounts_received,
    AVG(o.discount_amount) as avg_discount_per_order,
    SUM(o.tax_amount) as total_tax_paid,
    SUM(o.shipping_cost) as total_shipping_paid,
    
    -- Behavioral metrics
    COUNT(CASE WHEN o.order_status = 'completed' THEN 1 END) as completed_orders,
    COUNT(CASE WHEN o.order_status = 'cancelled' THEN 1 END) as cancelled_orders,
    COUNT(CASE WHEN o.order_status = 'returned' THEN 1 END) as returned_orders,
    
    -- Payment method preferences
    MODE(o.payment_method) as preferred_payment_method,
    COUNT(DISTINCT o.payment_method) as payment_methods_used,
    
    -- Shipping analysis
    AVG(s.shipping_cost) as avg_shipping_cost,
    AVG(DATEDIFF('day', s.ship_date, s.actual_delivery_date)) as avg_delivery_days,
    COUNT(CASE WHEN s.actual_delivery_date <= s.estimated_delivery_date THEN 1 END) as on_time_deliveries,
    
    -- Recency, Frequency, Monetary (RFM) components
    DATEDIFF('day', MAX(o.order_date), CURRENT_DATE()) as recency_days,
    COUNT(DISTINCT o.order_id) / NULLIF(DATEDIFF('month', MIN(o.order_date), MAX(o.order_date)), 0) as frequency_per_month,
    SUM(o.total_amount) as monetary_value,
    
    -- Customer scoring
    CASE 
        WHEN DATEDIFF('day', MAX(o.order_date), CURRENT_DATE()) <= 30 THEN 'Active'
        WHEN DATEDIFF('day', MAX(o.order_date), CURRENT_DATE()) <= 90 THEN 'At Risk'
        WHEN DATEDIFF('day', MAX(o.order_date), CURRENT_DATE()) <= 180 THEN 'Inactive'
        ELSE 'Lost'
    END as customer_status,
    
    -- Seasonal patterns
    COUNT(CASE WHEN MONTH(o.order_date) IN (12, 1, 2) THEN 1 END) as winter_orders,
    COUNT(CASE WHEN MONTH(o.order_date) IN (3, 4, 5) THEN 1 END) as spring_orders,
    COUNT(CASE WHEN MONTH(o.order_date) IN (6, 7, 8) THEN 1 END) as summer_orders,
    COUNT(CASE WHEN MONTH(o.order_date) IN (9, 10, 11) THEN 1 END) as fall_orders,
    
    CURRENT_TIMESTAMP() as view_generated_at

FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
LEFT JOIN order_items oi ON o.order_id = oi.order_id
LEFT JOIN shipments s ON o.order_id = s.order_id

GROUP BY 
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    c.customer_segment,
    c.country,
    c.registration_date;CREATE VIEW customer_analytics_dashboard
(
  customer_id COMMENT 'Unique customer identifier',
  first_name COMMENT 'Customer’s first name',
  last_name COMMENT 'Customer’s last name',
  email COMMENT 'Customer email address',
  customer_segment COMMENT 'Customer segment classification',
  country COMMENT 'Customer country',
  registration_date COMMENT 'Date of customer registration'
)
COMMENT = 'Analytical view summarizing customer behavior, lifetime value, and engagement metrics.'
AS
-- [query remains unchanged…]
;

CREATE OR REPLACE HYBRID TABLE IF NOT EXISTS customer_order_hybrid
(
    order_id         BIGINT NOT NULL COMMENT 'Unique identifier for the order',
    customer_id      BIGINT NOT NULL COMMENT 'Customer who placed the order',
    order_date       DATE NOT NULL COMMENT 'Date when the order was placed',
    total_amount     DECIMAL(12,2) NOT NULL COMMENT 'Total value of the order',
    discount_amount  DECIMAL(10,2) COMMENT 'Discount applied to the order',
    tax_amount       DECIMAL(10,2) COMMENT 'Tax applied on the order',
    shipping_cost    DECIMAL(8,2) COMMENT 'Shipping cost for the order',
    order_status     VARCHAR(20) COMMENT 'Status of the order (e.g., completed, cancelled)',
    created_at       TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP() COMMENT 'Record creation timestamp',
    updated_at       TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP() COMMENT 'Record last updated timestamp',
    
    CONSTRAINT PK_customer_order_hybrid PRIMARY KEY (order_id)
)
COMMENT = 'Hybrid table for storing historical and near real-time customer orders'
WITH TAG ("data_owner" = 'sales_team', "pii_flag" = 'true')
CLUSTER BY (customer_id);

CREATE OR REPLACE ICEBERG TABLE IF NOT EXISTS inventory_audit_iceberg
(
    audit_id           BIGINT NOT NULL COMMENT 'Unique identifier for each inventory audit record',
    product_id         BIGINT NOT NULL COMMENT 'ID of the product',
    warehouse_id       BIGINT NOT NULL COMMENT 'ID of the warehouse',
    quantity_on_hand   INTEGER COMMENT 'Quantity on hand at the time of audit',
    quantity_reserved  INTEGER COMMENT 'Quantity reserved at the time of audit',
    quantity_available INTEGER COMMENT 'Available quantity at the time of audit',
    change_type        VARCHAR(20) COMMENT 'Type of change: INSERT, UPDATE, DELETE',
    audit_timestamp    TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP() COMMENT 'Timestamp when the audit was recorded',
    
    CONSTRAINT PK_inventory_audit_iceberg PRIMARY KEY (audit_id)
)
COMMENT = 'Iceberg table tracking versioned inventory changes for auditing and historical reporting'
WITH TAG ("data_owner" = 'inventory_team', "cost_center" = 'INV-001')
;

