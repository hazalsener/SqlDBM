-- ************************** SqlDBM: Snowflake *************************
-- ** Generated by SqlDBM: Untitled projectxx by hazal.sener@sqldbm.com *


-- **************************************  "business_domain"
CREATE TAG "business_domain";

-- **************************************  "cost_center"
CREATE TAG "cost_center";

-- **************************************  "data_owner"
CREATE TAG "data_owner";

-- **************************************  "gdpr_compliant"
CREATE TAG "gdpr_compliant";

-- **************************************  "pii_flag"
CREATE TAG "pii_flag";

-- ************************************** warehouses
CREATE TABLE warehouses
(
 warehouse_id          bigint NOT NULL,
 warehouse_name        varchar(100),
 location              varchar(100),
 capacity_cubic_meters decimal(12,2),
 manager_name          varchar(100),
 operating_hours       varchar(50),
 created_at            timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),

 CONSTRAINT PK_warehouses PRIMARY KEY ( warehouse_id )
);

-- ************************************** suppliers
CREATE TABLE suppliers
(
 supplier_id         bigint NOT NULL,
 supplier_name       varchar(100),
 contact_person      varchar(100),
 email               varchar(100),
 phone               varchar(20),
 address             text,
 country             varchar(50),
 rating              decimal(3,2),
 contract_start_date date,
 contract_end_date   date,
 created_at          timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),

 CONSTRAINT PK_suppliers PRIMARY KEY ( supplier_id )
);

-- ************************************** products
CREATE TABLE products
(
 product_id   bigint NOT NULL,
 product_name varchar(200),
 brand        varchar(100),
 category     varchar(50),
 subcategory  varchar(50),
 unit_price   decimal(10,2),
 cost_price   decimal(10,2),
 weight       decimal(8,2),
 dimensions   varchar(50),
 launch_date  date,
 status       varchar(20),
 created_at   timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),
 updated_at   timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),

 CONSTRAINT PK_products PRIMARY KEY ( product_id )
) WITH TAG ("data_owner" = 'product_team', "business_domain" = 'catalog', "cost_center" = 'PROD-001');

-- ************************************** customers
CREATE TABLE customers
(
 customer_id       bigint NOT NULL,
 first_name        varchar(50),
 last_name         varchar(50),
 email             varchar(100),
 phone             varchar(20),
 registration_date date,
 customer_segment  varchar(20),
 country           varchar(50),
 state             varchar(50),
 city              varchar(50),
 postal_code       varchar(10),
 created_at        timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),
 updated_at        timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),

 CONSTRAINT PK_customers PRIMARY KEY ( customer_id )
) WITH TAG ("gdpr_compliant" = 'true');

-- ************************************** product_suppliers
CREATE TABLE product_suppliers
(
 product_supplier_id    bigint NOT NULL,
 product_id             bigint NOT NULL,
 supplier_id            bigint NOT NULL,
 supply_price           decimal(10,2),
 lead_time_days         integer,
 minimum_order_quantity integer,
 is_primary_supplier    boolean DEFAULT FALSE,
 created_at             timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),

 CONSTRAINT PK_product_suppliers PRIMARY KEY ( product_supplier_id ),
 CONSTRAINT FK_product_suppliers_products FOREIGN KEY ( product_id ) REFERENCES products ( product_id ),
 CONSTRAINT FK_product_suppliers_suppliers FOREIGN KEY ( supplier_id ) REFERENCES suppliers ( supplier_id )
);

-- ************************************** orders
CREATE TABLE orders
(
 order_id         bigint NOT NULL,
 customer_id      bigint NOT NULL,
 order_date       date,
 order_timestamp  timestamp_ntz,
 total_amount     decimal(12,2),
 discount_amount  decimal(10,2),
 tax_amount       decimal(10,2),
 shipping_cost    decimal(8,2),
 payment_method   varchar(30),
 order_status     varchar(20),
 shipping_address text,
 billing_address  text,
 currency         varchar(3),
 exchange_rate    decimal(10,4) DEFAULT 1.0,
 created_at       timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),
 updated_at       timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),

 CONSTRAINT PK_orders PRIMARY KEY ( order_id ),
 CONSTRAINT FK_orders_customers FOREIGN KEY ( customer_id ) REFERENCES customers ( customer_id )
) WITH TAG ("data_owner" = 'sales_team', "pii_flag" = 'true', "cost_center" = 'SALES-001');

-- ************************************** inventory
CREATE TABLE inventory
(
 inventory_id       bigint NOT NULL,
 product_id         bigint NOT NULL,
 warehouse_id       bigint NOT NULL,
 quantity_on_hand   integer,
 quantity_reserved  integer,
 quantity_available integer,
 reorder_point      integer,
 reorder_quantity   integer,
 last_restock_date  date,
 created_at         timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),
 updated_at         timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),

 CONSTRAINT PK_inventory PRIMARY KEY ( inventory_id ),
 CONSTRAINT FK_inventory_products FOREIGN KEY ( product_id ) REFERENCES products ( product_id ),
 CONSTRAINT FK_inventory_warehouses FOREIGN KEY ( warehouse_id ) REFERENCES warehouses ( warehouse_id )
) WITH TAG ("pii_flag" = 'false', "cost_center" = 'INV-001');

-- ************************************** shipments
CREATE TABLE shipments
(
 shipment_id             bigint NOT NULL,
 order_id                bigint NOT NULL,
 warehouse_id            bigint NOT NULL,
 carrier                 varchar(50),
 tracking_number         varchar(100),
 ship_date               date,
 estimated_delivery_date date,
 actual_delivery_date    date,
 shipment_status         varchar(20),
 shipping_cost           decimal(8,2),
 weight                  decimal(8,2),
 created_at              timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),
 updated_at              timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),

 CONSTRAINT PK_shipments PRIMARY KEY ( shipment_id ),
 CONSTRAINT FK_shipments_orders FOREIGN KEY ( order_id ) REFERENCES orders ( order_id ),
 CONSTRAINT FK_shipments_warehouses FOREIGN KEY ( warehouse_id ) REFERENCES warehouses ( warehouse_id )
) WITH TAG ("data_owner" = 'logistics_team');

-- ************************************** order_items
CREATE TABLE order_items
(
 order_item_id    bigint NOT NULL,
 order_id         bigint NOT NULL,
 product_id       bigint NOT NULL,
 quantity         integer,
 unit_price       decimal(10,2),
 discount_percent decimal(5,2),
 line_total       decimal(12,2),
 created_at       timestamp_ntz DEFAULT CURRENT_TIMESTAMP(),

 CONSTRAINT PK_order_items PRIMARY KEY ( order_item_id ),
 CONSTRAINT FK_order_items_orders FOREIGN KEY ( order_id ) REFERENCES orders ( order_id ),
 CONSTRAINT FK_order_items_products FOREIGN KEY ( product_id ) REFERENCES products ( product_id )
);

-- ************************************** real_time_inventory_status
CREATE DYNAMIC TABLE real_time_inventory_status
(
 product_id     int NOT NULL,
 product_name   varchar NOT NULL,
 brand          varchar NOT NULL,
 category       varchar NOT NULL,
 unit_price     number(38,0) NOT NULL,
 warehouse_id   number(38,0) NOT NULL,
 warehouse_name varchar NOT NULL,
 location       varchar NOT NULL
) WITH TAG ("data_owner" = 'inventory_team')
WAREHOUSE = COMPUTE_WH
TARGET_LAG = '1 MINUTE'
  AS SELECT 
    i.product_id,
    p.product_name,
    p.brand,
    p.category,
    p.unit_price,
    w.warehouse_id,
    w.warehouse_name,
    w.location,
    
    -- Current inventory levels
    i.quantity_on_hand,
    i.quantity_reserved,
    i.quantity_available,
    i.reorder_point,
    i.reorder_quantity,
    
    -- Stock status calculations
    CASE 
        WHEN i.quantity_available <= 0 THEN 'Out of Stock'
        WHEN i.quantity_available <= i.reorder_point THEN 'Low Stock'
        WHEN i.quantity_available <= (i.reorder_point * 2) THEN 'Medium Stock'
        ELSE 'High Stock'
    END as stock_status,
    
    -- Days until reorder needed (estimated)
    CASE 
        WHEN recent_sales.avg_daily_sales > 0 
        THEN ROUND(i.quantity_available / recent_sales.avg_daily_sales, 1)
        ELSE NULL
    END as estimated_days_until_reorder,
    
    -- Financial metrics
    i.quantity_on_hand * p.unit_price as inventory_value,
    i.quantity_available * p.unit_price as available_inventory_value,
    
    -- Supplier information
    ps.supplier_id as primary_supplier_id,
    s.supplier_name as primary_supplier_name,
    ps.lead_time_days,
    ps.minimum_order_quantity,
    
    -- Performance metrics
    COALESCE(recent_sales.total_sold_last_30_days, 0) as units_sold_last_30_days,
    COALESCE(recent_sales.avg_daily_sales, 0) as avg_daily_sales,
    i.last_restock_date,
    DATEDIFF('day', i.last_restock_date, CURRENT_DATE()) as days_since_last_restock,
    
    -- Alerts and flags
    CASE 
        WHEN i.quantity_available <= 0 THEN TRUE
        ELSE FALSE
    END as out_of_stock_flag,
    
    CASE 
        WHEN i.quantity_available <= i.reorder_point THEN TRUE
        ELSE FALSE
    END as reorder_needed_flag,
    
    CASE 
        WHEN DATEDIFF('day', i.last_restock_date, CURRENT_DATE()) > 90 THEN TRUE
        ELSE FALSE
    END as stale_inventory_flag,
    
    CURRENT_TIMESTAMP() as last_updated

FROM inventory i
JOIN products p ON i.product_id = p.product_id
JOIN warehouses w ON i.warehouse_id = w.warehouse_id
LEFT JOIN product_suppliers ps ON i.product_id = ps.product_id AND ps.is_primary_supplier = TRUE
LEFT JOIN suppliers s ON ps.supplier_id = s.supplier_id
LEFT JOIN (
    SELECT 
        oi.product_id,
        COUNT(*) as total_sold_last_30_days,
        COUNT(*) / 30.0 as avg_daily_sales
    FROM order_items oi
    JOIN orders o ON oi.order_id = o.order_id
    WHERE o.order_date >= DATEADD('day', -30, CURRENT_DATE())
        AND o.order_status = 'completed'
    GROUP BY oi.product_id
) recent_sales ON i.product_id = recent_sales.product_id;

-- ************************************** customer_analytics_dashboard
CREATE VIEW customer_analytics_dashboard
(
  customer_id,
  first_name,
  last_name,
  email,
  customer_segment,
  country,
  registration_date
)
AS
SELECT 
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    c.customer_segment,
    c.country,
    c.registration_date,
    
    -- Order metrics
    COUNT(DISTINCT o.order_id) as total_orders,
    SUM(o.total_amount) as lifetime_value,
    AVG(o.total_amount) as average_order_value,
    MIN(o.order_date) as first_order_date,
    MAX(o.order_date) as last_order_date,
    DATEDIFF('day', MIN(o.order_date), MAX(o.order_date)) as customer_lifespan_days,
    
    -- Financial metrics
    SUM(o.discount_amount) as total_discounts_received,
    AVG(o.discount_amount) as avg_discount_per_order,
    SUM(o.tax_amount) as total_tax_paid,
    SUM(o.shipping_cost) as total_shipping_paid,
    
    -- Behavioral metrics
    COUNT(CASE WHEN o.order_status = 'completed' THEN 1 END) as completed_orders,
    COUNT(CASE WHEN o.order_status = 'cancelled' THEN 1 END) as cancelled_orders,
    COUNT(CASE WHEN o.order_status = 'returned' THEN 1 END) as returned_orders,
    
    -- Payment method preferences
    MODE(o.payment_method) as preferred_payment_method,
    COUNT(DISTINCT o.payment_method) as payment_methods_used,
    
    -- Shipping analysis
    AVG(s.shipping_cost) as avg_shipping_cost,
    AVG(DATEDIFF('day', s.ship_date, s.actual_delivery_date)) as avg_delivery_days,
    COUNT(CASE WHEN s.actual_delivery_date <= s.estimated_delivery_date THEN 1 END) as on_time_deliveries,
    
    -- Recency, Frequency, Monetary (RFM) components
    DATEDIFF('day', MAX(o.order_date), CURRENT_DATE()) as recency_days,
    COUNT(DISTINCT o.order_id) / NULLIF(DATEDIFF('month', MIN(o.order_date), MAX(o.order_date)), 0) as frequency_per_month,
    SUM(o.total_amount) as monetary_value,
    
    -- Customer scoring
    CASE 
        WHEN DATEDIFF('day', MAX(o.order_date), CURRENT_DATE()) <= 30 THEN 'Active'
        WHEN DATEDIFF('day', MAX(o.order_date), CURRENT_DATE()) <= 90 THEN 'At Risk'
        WHEN DATEDIFF('day', MAX(o.order_date), CURRENT_DATE()) <= 180 THEN 'Inactive'
        ELSE 'Lost'
    END as customer_status,
    
    -- Seasonal patterns
    COUNT(CASE WHEN MONTH(o.order_date) IN (12, 1, 2) THEN 1 END) as winter_orders,
    COUNT(CASE WHEN MONTH(o.order_date) IN (3, 4, 5) THEN 1 END) as spring_orders,
    COUNT(CASE WHEN MONTH(o.order_date) IN (6, 7, 8) THEN 1 END) as summer_orders,
    COUNT(CASE WHEN MONTH(o.order_date) IN (9, 10, 11) THEN 1 END) as fall_orders,
    
    CURRENT_TIMESTAMP() as view_generated_at

FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
LEFT JOIN order_items oi ON o.order_id = oi.order_id
LEFT JOIN shipments s ON o.order_id = s.order_id

GROUP BY 
    c.customer_id,
    c.first_name,
    c.last_name,
    c.email,
    c.customer_segment,
    c.country,
    c.registration_date;


